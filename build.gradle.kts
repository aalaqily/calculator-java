/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.10/userguide/building_java_projects.html in the Gradle documentation.
 */
 
 import java.net.URL

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    application
    java
    eclipse
}

repositories {
  mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation(libs.junit.jupiter)

    testRuntimeOnly("org.junit.platform:junit-platform-launcher")
    
    implementation(files("libs/math-java.jar"))
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

application {
    // Define the main class for the application.
    mainClass = "CLI"
}

tasks.named<Test>("test") {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

tasks.register<Jar>("jarCLI") {
    group = "build"
    archiveBaseName.set("calculator-cli")
    manifest {
        attributes["Main-Class"] = "CLI"
    }
    from(sourceSets.main.get().output)
    dependsOn(configurations.runtimeClasspath)
    from({
        configurations.runtimeClasspath.get()
            .filter { it.name.endsWith("jar") }
            .map { zipTree(it) }
    })
}

tasks.register<Jar>("jarGUI") {
    group = "build"
    archiveBaseName.set("calculator-gui")
    manifest {
        attributes["Main-Class"] = "GUI"
    }
    from(sourceSets.main.get().output)
    dependsOn(configurations.runtimeClasspath)
    from({
        configurations.runtimeClasspath.get()
            .filter { it.name.endsWith("jar") }
            .map { zipTree(it) }
    })
}

val mathLibJar = "math-java.jar"
val mathLibJarFile = file("libs/$mathLibJar")
val mathLibJarUrl = "https://github.com/aalaqily/math-java/releases/download/v0.1.0/math-java-0.1.0.jar"

tasks.register("ensureMathLibPresent") {
    doLast {
        if (!mathLibJarFile.exists()) {
            println("Math library JAR not found, downloading from $mathLibJarUrl")
            mathLibJarFile.parentFile.mkdirs()
            URL(mathLibJarUrl).openStream().use { input ->
                mathLibJarFile.outputStream().use { output -> input.copyTo(output) }
            }
            println("Math library JAR downloaded to ${mathLibJarFile.absolutePath}")
        } else {
            println("Math library JAR found at ${mathLibJarFile.absolutePath}")
        }
    }
}

// Example: make compile tasks depend on this custom check/download
tasks.named("compileJava") {
    dependsOn("ensureMathLibPresent")
}